class Solution {
public:
   
    TreeNode* bstFromPreorder(vector<int>& preorder) {
         //base case
         if(preorder.size()==0)
            return NULL;
            
         //inserting the first element of preorder as it will be the node for bst   
            TreeNode* node= new TreeNode(preorder[0]);
            
            vector<int>left;
            vector<int>right;
            
        for(int i=1; i<preorder.size();i++){
               if(preorder[i]<preorder[0]){
                  left.push_back(preorder[i]);
                  }
               else 
                  right.push_back(preorder[i]);
         }
         node->left= bstFromPreorder(left);
         node->right= bstFromPreOrder(right);
         
         return node;
      }
    };

//recursive approach 

class Solution {
public:
    TreeNode* solve(vector<int>& preorder, int mini, int maxi,int &i){
        if(i>=preorder.size())
            return NULL;
        if(preorder[i]<mini || preorder[i]>maxi)
            return NULL;
        TreeNode* root = new TreeNode(preorder[i++]);
        root->left=solve(preorder,mini,root->val,i);
        root->right=solve(preorder,root->val,maxi,i);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int mini= INT_MIN;
        int maxi = INT_MAX;
        int i=0;
        return solve(preorder,mini,maxi,i);
    }
};
